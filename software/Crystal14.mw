
[[Category:Software]][[Category:Applications]]
<table style="width:37%; background-color:#F9F9F9;float:right;margin-left:10px;">
<tr>
<td style="vertical-align:top;">
'''Quick Links'''
<ul style="column-count:2;-moz-column-count:2;-webkit-column-count:2">
<li>[[RC Systems | Platforms Overview]]</li>
<li>[[Additional Resource Requests| Request Additional Resources]]</li>
<li>[[:Category:User Guide | User Guide]]</li>
<li>[[Software| Software]]</li>
<li>[[Legion Metrics | Service Metrics]]</li>
<li>[[Account Services]]</li>
</ul>
</td>
</tr>
<tr>
<td style="vertical-align:top;">
__NOEDITSECTION__[[Contact and Support|Contact & Support]]<br />
For support for any of our services or for general advice and consultancy, email:<br />
[mailto:rc-support@ucl.ac.uk rc-support@ucl.ac.uk]

</td>
</tr>
</table>


[[Applications | Back to Applications]]<br /><br />
'''Current Version: 1.0.4'''<br />
Crystal14 is a general-purpose program for the study of crystalline solids. The CRYSTAL program computes the electronic structure of periodic systems within Hartree Fock, density functional or various hybrid approximations. <br /><br />
==Setup==
Crystal14 versaion 1.0.4 is available on Legion and Grace <br /> <br />The following changes need to be made to the standard modules before running this software: <br />

<code>module unload mpi</code><br /><code>module load mpi/openmpi/1.8.4/intel-2015-update2</code><br /><code>module load crystal14/v1.0.4</code><br /><br />Crystal14 is commercial software which is available free of charge to UK academics. You must obtain a license from Crystal Solutions [http://www.crystalsolutions.eu/cat/crystal-cryscor/academic-uk CRYSTAL/CRYSCOR - Academic UK license site]. Access to Crystal14 is enabled by being a member of he appropriate reserved application group. Please email [mailto:rc-support@ucl.ac.uk rc-support@ucl.ac.uk] including a copy of your licence to get your userid added to the Crystal14 group.

Crystal14 is intended to be run primarily within batch jobs however you may run short (less than 5 minutes execution time) interactive tests on the Login Nodes and longer (up to two hours) using qrsh to request an interactive session on the compute nodes. See the [https://wiki.rc.ucl.ac.uk/wiki/Category:User_Guide RC Systems User Guide] for more information.

Here is an example runscript for running the parallel version of Crystal.
[[Category:Pages with bash scripts]]
==Parallel Crystal (Pcrystal) Example Runscript==

<div style="background-color:#F9F9F9;width=100%;padding:5px 10px 5px 10px;"><code>
 <nowiki>
#!/bin/bash -l

# Crystal14: Batch script to run Crystal14 in parallel (Pcrystal)
# using one of the supplied examples, distributed parallel (32 cores).

# Usage eg: qsub -v JOB=test00 run_Crystal14_p.sh

# 1. Force bash as the executing shell.
#$ -S /bin/bash

# 2. Request one hour of wallclock time (format hours:minutes:seconds).
#$ -l h_rt=1:00:0

# 3. Request 2 gigabyte of RAM.
#$ -l mem=2G

# 4. Merge output and error files
#$ -j y

# 5. Set the name of the job.
#$ -N Pcrystal_32

# 6. Select the MPI parallel environment (qlc) and 32 processors.
#$ -pe mpi 32

# 7. Set the working directory to somewhere in your scratch space.  
# Replace <your userid> with your UCL userid.
#$ -wd /home/<your userid>/Scratch/Crystal14_examples

# 8. Load the Crystal14 modules to set up your environment

module unload mpi/intel/2015/update3/intel
module load mpi/openmpi/1.8.4/intel-2015-update2
module load crystal14/v1.0.4

module list

# 9. Create a directory for this job and copy the input file into it. 
mkdir $JOB
cd $JOB
cp /home/<your userid>/Crystal14/test_cases/inputs/${JOB}.d12 INPUT

# 10. Run Pcrystal using gerun

gerun $CRY14_EXEDIR/$VERSION/Pcrystal
</nowiki>
</code>
</div>
This is available on:
<code>
 /shared/ucl/apps/Crystal14/v1.0.4/run_Crystal14_p.sh
</code>
You will need to change the '-wd /home/<your userid>/Scratch/Crystal14_examples' Grid Engine directive and may need to change the memory, wallclock time, number of MPI Processors (item 6) and job name directives as well.

A qsub command of the form:
<code>
 qsub -v JOB=test00 run_Crystal14_p.sh
</code>
can be used to submit the job. In this example your Crystal14 input file would be called:
<code>
 test00.d12
</code>
so replace 'test00' with the name of your file.

Output files will be saved in the job's working directory and $JOB sub-directory.



Similarly the parallel version of Properties can be run using a runscript like:


[[Category:Pages with bash scripts]]
==Parallel Properties (Pproperties) Example Runscript==

<div style="background-color:#F9F9F9;width=100%;padding:5px 10px 5px 10px;"><code>
 <nowiki>
#!/bin/bash -l

# Crystal14: Batch script to run Crystal14 in parallel (Pproperties)
# using one of the supplied examples, distributed parallel (32 cores).

# Usage: qsub -v JOB=test00 run_Crystal14Prop_p.sh

# 1. Force bash as the executing shell.
#$ -S /bin/bash

# 2. Request one hour of wallclock time (format hours:minutes:seconds).
#$ -l h_rt=1:0:0

# 3. Request 2 gigabyte of RAM.
#$ -l mem=2G

# 4. Merge output and error files
#$ -j y

# 5. Set the name of the job.
#$ -N Pproperties_32

# 6. Select the MPI parallel environment (qlc) and 32 processors.
#$ -pe mpi 32

# 7. Set the working directory to somewhere in your scratch space.  In this
# case the subdirectory ADF_examples
#$ -wd /home/<your userid>/Scratch/Crystal14_examples

# 8. Load the Crystal14 modules to set up your environment

module unload mpi/intel/2015/update3/intel
module load mpi/openmpi/1.8.4/intel-2015-update2
module load crystal14/v1.0.4

module list

cd $JOB
cp ./${JOB}.d3 INPUT

# 9. Run Pcrystal using gerun

gerun $CRY14_EXEDIR/$VERSION/Pproperties
</nowiki>
</code>
</div>
This is available on:
<code>
 /shared/ucl/apps/Crystal14/v1.0.4/run_Crystal14Prop_p.sh
</code>
Change the your copy in the same way as the PCrystal one.

A similar qsub command can be used:
<code>
 qsub -v JOB=test00 run_Crystal14Prop_p.sh
</code>
to submit the job. In this example your Crystal14 input file would be called:
<code>
 test00.d3
</code>
so replace 'test00' with the name of your file.

Output files will be saved in the job's working directory and $JOB sub-directory. 

[[#top | Back to top]]






