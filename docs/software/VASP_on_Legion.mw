
[[Category:Software]][[Category:Applications]]
<table style="width:37%; background-color:#F9F9F9;float:right;margin-left:10px;">
<tr>
<td style="vertical-align:top;">
'''Quick Links'''
<ul style="column-count:2;-moz-column-count:2;-webkit-column-count:2">
<li>[[RC Systems | Platforms Overview]]</li>
<li>[[Additional Resource Requests| Request Additional Resources]]</li>
<li>[[:Category:User Guide | User Guide]]</li>
<li>[[Software| Software]]</li>
<li>[[Legion Metrics | Service Metrics]]</li>
<li>[[Account Services]]</li>
</ul>
</td>
</tr>
<tr>
<td style="vertical-align:top;">
__NOEDITSECTION__[[Contact and Support|Contact & Support]]<br />
For support for any of our services or for general advice and consultancy, email:<br />
[mailto:rc-support@ucl.ac.uk rc-support@ucl.ac.uk]

</td>
</tr>
</table>


[[Applications | Back to Applications]]<br /><br />
'''Current Version: 5.4.1'''<br />
__NOTOC__
Most VASP resources require us to have proof that you have a license before we can make them available to you. To gain access, please email the support team at rc-support _AT_ ucl.ac.uk with either a copy of your license or endorsement from another known license holder, and the support team can add you to the VASP access group.

Although centrally available versions of VASP 5.x exist, we recognise that many users will wish to compile their own copies for optimisation or integration of externally developed modules. 

If you do not have a VASP license, please contact http://vasp.at for information on how to obtain one.

==Compiled Versions==

Currently available is version 5.4.1, compiled using the default modules on the system (Intel 2015 compilers including MKL, and Intel MPI). The executables are

* vasp_gam - optimised for gamma point calculations only
* vasp_std - standard version
* vasp_ncl - for non-collinear magnetic structure and/or spin-orbit coupling calculations <br /><br />

==Example script for centrally installed versions==
Type <code>module avail vasp</code> to see all available modules. Type <code>module show <modulename></code> to see what prerequisites those modules have and the environment variables they set up.
<div style="background-color:#F9F9F9;width=100%;padding:5px 10px 5px 10px;">
<code>
 <nowiki>
#!/bin/bash -l

# Batch script to run an MPI parallel job on Legion with the upgraded software
# stack under SGE with Intel MPI.

# 1. Force bash as the executing shell.
#$ -S /bin/bash

# 2. Request wallclock time (format hours:minutes:seconds).
#$ -l h_rt=02:00:00

# 3. Request RAM per process.
#$ -l mem=1G

# 4. Request TMPDIR space per node (default is 10 GB)
#$ -l tmpfs=10G

# 5. Set the name of the job.
#$ -N vasptest

# 6. Select the MPI parallel environment and number of processes.
#$ -pe mpi 12

# 7. Set the Current Working Directory
#$ -cwd

# 8. Load the correct modules for this version of VASP. This also outputs some information about
# what you have loaded and the source dir - you can remove those lines if you wish.
module unload compilers 
module unload mpi
module load compilers/intel/2015/update2
module load mpi/intel/2015/update3/intel
module load vasp/5.4.1-24jun15-p08072015/intel-2015-update2
module list
echo "VASP_SRC_DIR: "$VASP_SRC_DIR

# 9. Run our MPI job. GERun is a wrapper that launches MPI jobs on Legion.
gerun vasp_std > vasp_output.$JOB_ID
</nowiki>
</code>
</div>

===MPI quiescence===

If your VASP runs are terminating unexpectedly early and your output files indicate that MPI communication is timing out after 900s, you should add <code>-q 0</code> to your mpirun command to prevent it doing this.
<code>
 gerun -q 0 vasp_std > vasp_output.$JOB_ID
</code>

==Building your own VASP==

You can see the VASP build script we used at [https://github.com/UCL-RITS/rcps-buildscripts/blob/master/vasp-5.4.1_install VASP-5.4.1_install] - look at the env_setup, pre_build and build sections.

To build VASP 5.3.5, have a look at [https://software.intel.com/en-us/articles/building-vasp-with-intel-mkl-and-intel-compilers Intel's guide to building VASP for Xeon processors] and also read [[Compiling]]. You don't need to source any Intel compiler files as the module sets up the environment variables for you.

[[#top | back to top]]






