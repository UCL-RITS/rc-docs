
[[Category:Software]][[Category:Applications]]
<table style="width:37%; background-color:#F9F9F9;float:right;margin-left:10px;">
<tr>
<td style="vertical-align:top;">
'''Quick Links'''
<ul style="column-count:2;-moz-column-count:2;-webkit-column-count:2">
<li>[[RC Systems | Platforms Overview]]</li>
<li>[[Additional Resource Requests| Request Additional Resources]]</li>
<li>[[:Category:User Guide | User Guide]]</li>
<li>[[Software| Software]]</li>
<li>[[Legion Metrics | Service Metrics]]</li>
<li>[[Account Services]]</li>
</ul>
</td>
</tr>
<tr>
<td style="vertical-align:top;">
__NOEDITSECTION__[[Contact and Support|Contact & Support]]<br />
For support for any of our services or for general advice and consultancy, email:<br />
[mailto:rc-support@ucl.ac.uk rc-support@ucl.ac.uk]

</td>
</tr>
</table>


[[Applications | Back to Applications]]<br /><br />
'''Current Version: 3.3.0'''<br />
R version 3.3.0 and Bioconductor 3.3 are available on legion and can be used in serial mode and shared memory parallel mode within single nodes using at most twelve processors. A wide range of additional R packages are also available. This version of R has been compiled with GCC 4.9.2 and the OpenBLAS high performance BLAS library. R is intended to be run primarily within batch jobs however you may run short (less than 5 minutes execution time) interactive tests on the Login Nodes. <br /><br />
==Setup==
Before you can use R interactively, you need to load the R module using: <br />

<code>module unload compilers</code><br /><code>module unload mpi</code><br /><code>module load r/recommended</code><br /><br />You can check that the modules are loaded using:
<code>
 module list
</code>
You should now be able to start R normally.
==Example Job Submission Script==
To submit batch jobs to the cluster you will need a runscript. Here is a simple example R runscript for serial jobs including comments:
<div style="background-color:#F9F9F9;width=100%;padding:5px 10px 5px 10px;">
<code>
 <nowiki>
#!/bin/bash -l

# Batch script to run a serial R job on Legion with the upgraded
# software stack under SGE. This version works with the modules
# environment upgraded in 2015.

# R Version 3.3.0

# 1. Force bash as the executing shell.
#$ -S /bin/bash

# 2. Request ten minutes of wallclock time (format hours:minutes:seconds).
#    Change this to suit your requirements.
#$ -l h_rt=0:10:0

# 3. Request 1 gigabyte of RAM. Change this to suit your requirements.
#$ -l mem=1G

# 4. Set the name of the job. You can change this if you wish.
#$ -N R_job_1

# 6. Set the working directory to somewhere in your scratch space.  This is
# a necessary step with the upgraded software stack as compute nodes cannot
# write to your $HOME.
#
# NOTE: this directory must exist.
#
# Replace "<your_UCL_id>" with your UCL user ID :)
#$ -wd /home/<your_UCL_id>/Scratch/R_output
 
# 7. Your work *must* be done in $TMPDIR 
cd $TMPDIR

# 8. Run your R program.
module unload compilers
module unload mpi
module load r/recommended

R --no-save < $R_input > $R_output

# 9. Preferably, tar-up (archive) all output files onto the shared scratch area
#    this will include the R_output file above.
tar zcvf $HOME/Scratch/R_output/files_from_job_$JOB_ID.tgz $TMPDIR

# Make sure you have given enough time for the copy to complete!
</nowiki>
</code>
</div>

Please copy if you wish and edit it to suit your jobs. You will need to change the ''-wd /home/<your_UCL_id>/Scratch/R_output'' SGE directive and may need to change the memory, wallclock time and job name directives as well. A suitable qsub command to submit a single R job using this runscript would be:
<code>
 qsub -v R_input=`pwd`/myR_job.R,R_output=myR_job.out run-R.sh
</code>

where ''myR_job.R'' is the file containing R commands and ''myR_job.out'' is the output file containing your results. In this example input, and your runscript files are in your current working directory. The output file is saved in the tar archive produced by the last  command in the runscript and will be in $HOME/Scratch/R_output.

[[#top | back to top]]
==Shared memory parallel jobs==
Here is an example runscript for running a shared memory parallel job:
<div style="background-color:#F9F9F9;width=100%">
<code>
 <nowiki>
#!/bin/bash -l

# Batch script to run an OpenMP threaded R job on Legion with the upgraded
# software stack under SGE. Using the forech packages foreach(...) %dopar%
# for example. 

# This version works with the modules environment upgraded in 2015.

# R Version 3.3.0

# 1. Force bash as the executing shell.
#$ -S /bin/bash

# 2. Request ten minutes of wallclock time (format hours:minutes:seconds).
#    Change this to suit your requirements.
#$ -l h_rt=0:10:0

# 3. Request 1 gigabyte of RAM. Change this to suit your requirements.
#$ -l mem=1G

# 4. Set the name of the job. You can change this if you wish.
#$ -N R_jobMC_2

# 5. Select 12 threads (the most possible on Legion). The number of threads here
#    must equal the number of worker processes in the registerDoMC call in your
#    R program.
#$ -pe smp 12

# 7. Set the working directory to somewhere in your scratch space.  This is
# a necessary step with the upgraded software stack as compute nodes cannot
# write to $HOME.
#
# NOTE: this directory must exist.
#
# Replace "<your_UCL_id>" with your UCL user ID :)
#$ -wd /home/<your_UCL_id>/Scratch/R_output

# 8. Your work *must* be done in $TMPDIR 
cd $TMPDIR

# 9. Run your R program.
module unload compilers
module unload mpi
module load r/recommended

R --no-save < $R_input > $R_output

# 10. Preferably, tar-up (archive) all output files onto the shared scratch area
#    this will include the R_output file above.
tar zcvf $HOME/Scratch/R_output/files_from_job_$JOB_ID.tgz $TMPDIR

# Make sure you have given enough time for the copy to complete!
</nowiki>
</code>
</div>

Again you may take a copy and modify to suit your jobs. You will need to change the ''-pe smp 12'' directive to match the number of R worker processes, the ''-wd /home/<your_UCL_id>/Scratch/R_output'' SGE directive and may need to change the memory, wallclock time and job name directives as well. A suitable qsub command to submit a single R job using this runscript would be:
<code>
 qsub -v R_input=`pwd`/myR_job.R,R_output=myR_job.out run-R-MC.sh
</code>
where ''myR_job.R'' is the file containing R commands and ''myR_job.out'' is the output file containing your results. In this example input, and your runscript files are in your current working directory. The output file is saved in the directory specified by the ''-wd'' SGE directive.

==Using your own local R packages==

There are several ways to modify your R library path so you can pick up local packages that you have installed in your own space.

The easiest way is to add them to the R_LIBS environment variable (insert the correct path):
<code>
 export R_LIBS=/your/local/R/library/path:$R_LIBS
</code>
Setting that in your terminal will let you install them from inside R and should be put in your jobscript (or your .bashrc) when you submit a job using those libraries. This appends your directory to $R_LIBS rather than overwriting it so the system libraries can still be found.

You can also change the library path for a session from within R:
<code>
 .libPaths(c('~/MyRlibs',.libPaths()))
</code>
This puts your local directory at the beginning of R's search path, and means that install.packages() will automatically put packages there and the library() function will find libraries in your local directory.

To install, after setting your library path:

From inside R, you can do
<code>
 install.packages('package_name', repos="http://cran.r-project.org")
</code>

Or if you have downloaded the tar file, you can do
<code>
 R CMD INSTALL -l /home/username/your_R_libs_directory package.tar.gz
</code>

If you want to keep some libraries separate, you can have multiple colon-separated paths in your $R_LIBS and specify which one you want to install into with R CMD INSTALL.

===BioConductor===

If you are installing extra packages for BioConductor, check that you are using the same version that Legion has at [[R_packages_available_on_Legion#Bioconductor_Packages_installed_on_RC_Systems]]

Eg. you can find the [http://www.bioconductor.org/packages/3.2/BiocViews.html#___Software BioConductor 3.2 package downloads here].

[[#top | back to top]]

==And Finally...==
R can be used in more complicated ways including for example using one R job to control the submission of other R jobs or submitting 1000s of jobs using the SGE Array job facility. This is beyond the scope of this introductory how to.

[[#top | back to top]]



